{
  "attributes": {
    "raw": {
      "document": "---\ntitle: \"BPFDoor Scanner\"\nslug: \"bpfdoor-scanner\"\ndate: \"2022-12-06\"\ndescription: \"Python script to identify hosts infected with the BPFDoor malware.\"\nauthor:\n  - slug: elastic-security-labs\nimage: \"tools-image.jpg\"\ncategory:\n  - slug: tools\ntags:\n  - bpfdoor\n---\n\nPython script to identify hosts infected with the BPFDoor malware.\n\n[Download bpfdoor-scanner.tar.gz](https://assets.contentstack.io/v3/assets/bltefdd0b53724fa2ce/bltae9bafece9048014/62882b50dcc93261eccb04e2/bpfdoor-scanner.tar.gz)\n\n## Getting Started\n\nThis tool provides a Python script to identify hosts that are infected with the BPFDoor malware.\n\n> The Elastic Security Team has released an indepth analysis of the BPFDoor malware and created an additional tool that will extract configurations from BPFDoor malware samples.\n>\n> - [BPFDoor analysis](https://bookish-bassoon-c37be003.pages.github.io/intelligence/2022/05/04.bpfdoor/article/)\n> - [BPFDoor configuration extractor](https://www.elastic.co/security-labs/bpfdoor-configuration-extractor)\n\n### Permissions\n\nOn Linux (and thus in a container), the tool requires the following permissions:\n\n- CAP_NET_BIND_SERVICE\n- CAP_NET_RAW\n\nOn any \\*NIX host, running the script with sudo will get you what you need. As long as you don’t strip the privileges listed for your container and you publish the UDP port you intend to receive on, you should be set.\n\n### Docker\n\nWe can easily run the scanner with Docker, first we need to build the image:\n\n```\nBuilding the BPFDoor scanner Docker image\n\ndocker build . -t bpfdoor-scanner\n```\n\n## Usage\n\nOnce you’be built the Docker iamge, we can run the container to get a list of the options.\n\n```\nRuning the BPFDoor container\n\ndocker run -ti --rm bpfdoor-scanner:latest --help\n\nUsage: bpfdoor-scanner [OPTIONS]\n\n  Sends a discovery packet to suspected BPFDoor endpoints.\n\n  Example usage:\n\n      sudo ./bpfdoor-scanner --target-ip 1.2.3.4\n\n  Sends a packet to IP 1.2.3.4 using the default target port 68/UDP (tool\n  listens on all ports) using the default interface on this host and listens\n  on port 53/UDP to masquerade as traffic.\n\n  NOTE: Elevated privileges are required for source ports < 1024.\n\nOptions:\n  --target-ip TEXT       [required]\n  --target-port INTEGER  [default: 68]\n  --source-ip TEXT       IP for target to respond to and attempt to bind\n                         locally  [default: 172.17.0.3]\n  --source-port INTEGER  Local port to listen on for response  [default: 53]\n  --timeout INTEGER      Number of seconds to wait for response  [default: 5]\n  -v, --verbose          Show verbose output\n  -d, --debug            Show debug output\n  --version\n  --help                 Show this message and exit.\n```\n\nThe minimum required option is just --target-ip. The rest have defaults. For running in a container, you’ll want to publish the return port (defaults to 53) and specify --source-ip of the host interface you wish to use. In the following example, the IP 192.168.100.10 is the interface on my host that will receive the packet.\n\n```\nExample running the BPFDoor scanner\n\ndocker run -ti --publish 53:53/udp --rm bpfdoor-scanner:latest \\\n  --target-ip 192.168.32.18 --source-ip 192.168.100.10\n```\n\n## Running Locally\n\nAs mentioned above, Docker is the recommended approach to running this project, however you can also run this locally. This project uses [Poetry](https://python-poetry.org/) to manage dependencies, testing, and metadata. If you have Poetry installed already, from this directory, you can simply run the following commands to run the tool. This will setup a virtual environment, install the dependencies, activate the virtual environment, and run the console script.\n\n```\nRunning BPFDoor scanner locally\n\npoetry lock\npoetry install\npoetry shell\nsudo bpfdoor-scanner --help\n```\n\nOnce that works, you can do the same sort of things as mentioned in the Docker instructions above.\n"
    },
    "title": "BPFDoor Scanner",
    "slug": "bpfdoor-scanner",
    "date": "2022-12-06",
    "description": "Python script to identify hosts infected with the BPFDoor malware.",
    "author": [
      {
        "slug": "elastic-security-labs"
      }
    ],
    "image": "tools-image.jpg",
    "category": [
      {
        "slug": "tools"
      }
    ],
    "tags": [
      "bpfdoor"
    ]
  },
  "id": "security_labs_content-bpfdoor_scanner-md",
  "type": "security_labs_content"
}
