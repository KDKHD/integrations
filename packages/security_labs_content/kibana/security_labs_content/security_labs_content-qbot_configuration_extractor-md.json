{
  "attributes": {
    "raw": {
      "document": "---\ntitle: \"QBOT Configuration Extractor\"\nslug: \"qbot-configuration-extractor\"\ndate: \"2022-12-06\"\nsubtitle: \"Configuration extraction tool for QBOT malware\"\ndescription: \"Python script to extract the configuration from QBOT samples.\"\nauthor:\n  - slug: elastic-security-labs\nimage: \"tools-image.jpg\"\ncategory:\n  - slug: tools\ntags:\n  - qbot\n  - ref3726\n  - qakbot\n---\n\nPython script to extract the configuration from QBOT samples.\n\n[Download qbot-config-extractor.tar.gz](https://assets.contentstack.io/v3/assets/bltefdd0b53724fa2ce/blta4523f3b586ba6ac/62e16e26d2f5267009ac073a/qbot-config-extractor.tar.gz)\n\n## Getting Started\n\nThis tool provides a Python module and command line tool that will extract configurations from the QBOT malware samples and dump the results to screen.\n\n> For information on the QBOT attack pattern and malware analysis, check out our blog posts detailing this:\n>\n> - [Exploring the QBOT Attack Pattern](https://www.elastic.co/security-labs/exploring-the-qbot-attack-pattern)\n> - [QBOT Malware Analysis](https://www.elastic.co/security-labs/qbot-malware-analysis)\n\n### Docker\n\nWe can easily run the extractor with Docker, first we need to build the image:\n\n```\ndocker build . -t qbot-config-extractor\n```\n\nThen we run the container with the **-v** flag to map a host directory to the docker container directory:\n\n```\ndocker run -ti --rm -v \\\n\"$(pwd)/data\":/data qbot-config-extractor:latest -d /data/\n```\n\nWe can either specify a single sample with **-f** option or a directory of samples with **-d**.\n\n```\n$ docker run -ti --rm -v $(pwd)/data:/data qbot-config-extractor:latest -f data/c2ba065654f13612ae63bca7f972ea91c6fe97291caeaaa3a28a180fb1912b3a\n\n=== Strings ===\n# Blob address: 0x100840a0\n# Key address: 0x10084040\n[0x0]: ProgramData\n[0xc]: /t4\n[0x10]: EBBA\n[0x15]: netstat -nao\n[0x22]: jHxastDcds)oMc=jvh7wdUhxcsdt2\n[0x40]: schtasks.exe /Create /RU \"NT AUTHORITY\\SYSTEM\" /SC ONSTART /TN %u /TR \"%s\" /NP /F\n\n...truncated...\n\n=== RESOURCE 1 ===\nKey: b'\\\\System32\\\\WindowsPowerShel1\\\\v1.0\\\\powershel1.exe'\nType: DataType.DOMAINS\n41.228.22.180:443\n47.23.89.62:995\n176.67.56.94:443\n103.107.113.120:443\n148.64.96.100:443\n47.180.172.159:443\n181.118.183.98:443\n\n...truncated...\n```\n\n### Running it Locally\n\nAs mentioned above, Docker is the recommended approach to running this project, however you can also run this locally. This project uses [Poetry](https://python-poetry.org/) to manage dependencies, testing, and metadata. If you have Poetry installed already, from this directory, you can simply run the following commands to run the tool. This will setup a virtual environment, install the dependencies, activate the virtual environment, and run the console script.\n\n```\npoetry lock\npoetry install\npoetry shell\nqbot-config-extractor -h\n```\n\nOnce that works, you can do the same sort of things as mentioned in the Docker instructions above.\n"
    },
    "title": "QBOT Configuration Extractor",
    "slug": "qbot-configuration-extractor",
    "subtitle": "Configuration extraction tool for QBOT malware",
    "date": "2022-12-06",
    "description": "Python script to extract the configuration from QBOT samples.",
    "author": [
      {
        "slug": "elastic-security-labs"
      }
    ],
    "image": "tools-image.jpg",
    "category": [
      {
        "slug": "tools"
      }
    ],
    "tags": [
      "qbot",
      "ref3726",
      "qakbot"
    ]
  },
  "id": "security_labs_content-qbot_configuration_extractor-md",
  "type": "security_labs_content"
}
